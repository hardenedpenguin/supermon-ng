#!/bin/sh

SUPERMON_DIR="/home/supermon-ng"

AddYear () {
    NewDate=`printf "%s\n" "$1" | /usr/bin/awk -v M="$MONTH" -v Y="$YEAR" 'BEGIN {Months="JanFebMarAprMayJunJulAugSepOctNovDec"; cM=""}
      { D=$0; L=length($0)
        if (L==4) cM=substr(D,2)
        if (L==5) cM=substr(D,3)
      }
      END {if (cM=="") print D
           else
           {
             cN=(index(Months,cM)-1)/3
             if (cN <0) print D
             else
             {
               if (cN > M) Y--
               print D Y
             }
           }
      }
      '`
}

PATH=/bin:/usr/bin:/usr/sbin:/sbin

OS=`uname -s`
if [ "$OS" != "Linux" ]; then
  exit
fi

if [ -f /etc/os-release ]; then
   OSVER=`cat /etc/os-release | grep "^NAME=" | sed 's/^NAME=//' | sed 's/\"//g'`
else
   OSVER="UNKNOWN"
fi

HSTNAME=`uname -n`
HSTID=`ip link show | grep -E "link/ether" | /usr/bin/awk '{if ($1 !~ "virbr") print $2}' | tr -d ':' | sort | head -1`
if [ "$HSTID" = "" ]; then
  HSTID=`hostid`
fi
DOMAIN=""
NSTYPE=""
MONTH=`date +%m`
YEAR=`date +%Y`

if [ "$DOMAIN" = "" -o "$DOMAIN" = "noname" ]; then
    DOMAIN="Standalone"
    NSTYPE="Files"
fi

if [ -f /etc/nsswitch.conf ]; then
  NSTYPE=`/usr/bin/awk 'BEGIN{nstype="FILES"}
    {
      if ($1 ~/^passwd/) { for(i=NF;i>=2;i--) if ( $i != "files" && $i != "compat" ) nstype=$i }
    } END{printf "%s",nstype}' /etc/nsswitch.conf`
fi
if [ "$NSTYPE" != "" ]; then
  DOMAIN="$DOMAIN($NSTYPE)"
fi

if [ -r /var/Location ]; then
    LOCATION=`cat /var/Location`
else
  if [ -r "${SUPERMON_DIR}/global.inc" ]; then
    LOCATION=`cat "${SUPERMON_DIR}/global.inc" | grep LOCATION | cut -f2 -d"\"" | sed 's/\"//g' | sed 's/\;//'`
  else
    LOCATION="Unknown"
  fi
fi

if [ -r /var/.Asset ]; then
  ASSET=`cut -f1 -d":" /var/.Asset`
  SERNUM=`cut -f2 -d":" /var/.Asset`
else
  if [ -r "${SUPERMON_DIR}/global.inc" ]; then
    ASSET=`cat "${SUPERMON_DIR}/global.inc" | grep -E ^.TITLE2 | cut -f2 -d"\"" | sed 's/\"//g' | sed 's/\;//'`
    SERNUM=`cat "${SUPERMON_DIR}/global.inc" | grep -E ^.TITLE3 | cut -f2 -d"\"" | sed 's/\"//g' | sed 's/\;//'`
  else
    ASSET="NA"
    SERNUM="NA"
  fi
fi

if [ -x /sbin/swapon ]; then
  SWAP=`/sbin/swapon -s | /usr/bin/awk 'BEGIN{S=0}{S=S+$3}END{printf("%d",S/1024)}'`
else
  SWAP='na'
fi

LASTLOG=`last | grep ":0" | head -500 | grep -v "root" | awk '
    BEGIN { cnt=0 }
    {if ($0!="")
     {
       if (cnt==0)
       {
         cnt++; UsrCnt[1]=1; User[1]=$1;
         if($7~/:/) UsrDate[1]=$6 $5; else UsrDate[1]=$5 $4
       }
        else
        {
          Found=0;
          for(i=1;i<=cnt;i++) if (User[i]==$1) {UsrCnt[i]++; Found=1}
          if (Found==0)
          {
            cnt++; UsrCnt[cnt]=1; User[cnt]=$1;
            if($7~/:/) UsrDate[cnt]=$6 $5; else UsrDate[cnt]=$5 $4
          }
        }
      }
    }
    END { High=1; for(i=2;i<=cnt;i++) if (UsrCnt[i]>UsrCnt[High]) High=i;
          print User[High]" "UsrDate[High]}'`
LASTUSR=`echo "$LASTLOG" | awk '{print $1}'`
LASTDAT=`echo "$LASTLOG" | awk '{print $2}'`
AddYear "$LASTDAT"
LASTLOG="$LASTUSR $NewDate"

UPTIME=`uptime | awk '{if (index($4,"day")==1) print $3 ; else print "1"}'`

if [ -f /var/sadm/system/logs/finish.log ]; then
  JUMPDATE=`ls -l /var/sadm/system/logs/finish.log | awk '{if ($8~/:/) print $7 $6; else print $7 $6 $8}'`
else
  if [ -d /lost+found ]; then
    JUMPDATE=`ls -l / | grep "lost+found" | awk '{if(NF==8){if ($7~/:/) print $6 $5; else print $6 $5 $7} else {if ($8~/:/) print $7 $6; else print $7 $6 $8}}'`
  else
    JUMPDATE="NA"
  fi
fi
AddYear "$JUMPDATE"
JUMPDATE="$NewDate"

MODEL="- PC"
DEVS="NA"
DEVS=`/sbin/fdisk -l 2>/dev/null | head -1 | sed -e 's/Disk //' -e 's/:.*//'`
if [ -z "$DEVS" ]; then DEVS="[only root user can retrieve storage device info]"; fi
GCARD="NA"
GRAPHICS=""

if [ -f /proc/meminfo ]; then
   MEMORY=`cat /proc/meminfo | grep MemTotal | awk '{printf("%d",($2/1000))}'`
else
   MEMORY=0
fi

if [ -f /proc/cpuinfo ]; then
   SPEED2=""
   SPEED=0; SLUG=0
   if [ "$SPEED" = "$SLUG" ]; then
      SPEED2=", TURBO-Mode enabled"
   fi
   if [ "$SPEED" -ge 1000000 ]; then
      SPEED=`echo "$SPEED" | awk '{printf "%.2f GHz", ($1/1000000)}'`
    else
      SPEED=`echo "$SPEED" | awk '{printf "%.0f MHz", ($1/1000)}'`
   fi
   NCPU=`grep -c "^processor" /proc/cpuinfo`
   CPUTYPE=`cat /proc/cpuinfo | grep 'model name' | cut -f2 -d':' | tr -s '[:space:]' | sed 's/^ //g' | head -1`
else
   SPEED=0
   NCPU=1
   CPUTYPE="NA"
   SPEED=`echo "$SPEED" | awk '{printf "%.0f MHz", ($1/1000)}'`
fi

if [ "$SPEED" = "1.50 GHz" ]; then
   MODEL="RPi-4B"
fi
if [ "$SPEED" = "1.40 GHz" ]; then
   MODEL="RPi-3B+Plus"
fi
if [ "$SPEED" = "1.20 GHz" ]; then
   MODEL="RPi-3"
fi
if [ "$SPEED" = "900 MHz" ]; then
   MODEL="RPi-2"
fi
if [ "$NCPU" -gt 1 ]; then
   SPEED="$NCPU@$SPEED"
fi

MODEL="$MODEL$SPEED2"

if [ "$GCARD" = " " ]; then
   GRAPHICS="UNKNOWN"
   GCARD="UNKNOWN"
fi

FLAGS=0
TxtFLAGS=""
if [ -f /var/.donotask ]; then
  FLAGS=`expr "$FLAGS" + 2`
  TxtFLAGS="$TxtFLAGS DoNotAsk"
fi
ADIR=/var/sadm/system/autoupdate
if [ -f "$ADIR/nopatches" ]; then
  FLAGS=`expr "$FLAGS" + 8`
  TxtFLAGS="$TxtFLAGS NoPatches"
fi
if [ -f "$ADIR/noretrofit" ]; then
  FLAGS=`expr "$FLAGS" + 16`
  TxtFLAGS="$TxtFLAGS NoRetrofit"
fi
if [ -f "$ADIR/nopassword" ]; then
  FLAGS=`expr "$FLAGS" + 32`
  TxtFLAGS="$TxtFLAGS NoPassword"
fi
if [ -f "$ADIR/killb4patches" ]; then
  FLAGS=`expr "$FLAGS" + 64`
  TxtFLAGS="$TxtFLAGS KillB4Patches"
fi
if [ -f "$ADIR/.Notified" ]; then
  FLAGS=`expr "$FLAGS" + 128`
  TxtFLAGS="$TxtFLAGS Notified"
fi

if command -v zdump >/dev/null 2>&1; then
  FlagTest=`zdump -v US/Eastern | grep " 2010 " | grep -E -c 'Mar|Nov'`
else
  FlagTest=0
fi

if [ "$FlagTest" -ge 4 ]; then
  FLAGS=`expr "$FLAGS" + 256`
  TxtFLAGS="$TxtFLAGS DST-OK"
fi
NetDevs=`ip link show | awk '/^[0-9]+:/ {gsub(/:/, "", $2); dev=$2} /state UP/ {print dev}'`
DHCP=0
for NETDEV in $NetDevs; do
  if [ -f "/etc/sysconfig/network-scripts/ifcfg-$NETDEV" ]; then
    if [ \`grep -ic BOOTPROTO=dhcp "/etc/sysconfig/network-scripts/ifcfg-$NETDEV"\` -gt 0 ]; then
      DHCP=1
    fi
  fi
done
if [ "$DHCP" -gt 0 ]; then
  FLAGS=`expr "$FLAGS" + 512`
  TxtFLAGS="$TxtFLAGS DHCP"
fi

MONPN="NA"
MONMOD="NA"
MONSN="NA"
CURRES="NA"
SIMMS=""

if [ "$#" -eq 0 ]; then
    echo "$HSTNAME:$MODEL:$DOMAIN:$LOCATION:$OS $OSVER:$HSTID:$ASSET:$SERNUM:${MEMORY}MB($SIMMS):${SWAP}MB:$GCARD:${SPEED}:$CPUTYPE:$DEVS:$JUMPDATE:$LASTLOG:$MONMOD:$MONSN:$CURRES:TBD:TBD:TBD:$FLAGS:$UPTIME"
else
    echo
    echo "HOST: $HSTNAME $MODEL"
    echo "  CPU:             $CPUTYPE"
    echo "  Memory:          ${MEMORY}MB"
    echo "  Swap:            ${SWAP}MB"
    if [ -n "$GCARD" ] && [ "$GCARD" != "NA" ] && [ "$GCARD" != "UNKNOWN" ]; then
        echo "  Graphics:        $GCARD ($GRAPHICS)"
    fi
    echo "  Storage Devices: $DEVS"
    echo "  OS Version:      $OSVER (Installed on $JUMPDATE)"
    echo "  Domain:          $DOMAIN"
    echo "  Host ID:         $HSTID"
    echo "  Location:        $LOCATION"
    echo "  System:          $ASSET"
    echo "  Service:         $SERNUM"
    echo "  Uptime:          $UPTIME days"
    echo "  Primary User:    $LASTLOG"
    if [ "$TxtFLAGS" = "" ]; then
      TxtFLAGS=" None"
    fi
    echo "  Flags:	  $TxtFLAGS"
fi

[ -z "$1" ] && exit